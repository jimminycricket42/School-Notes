/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TabKeyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  indentsIfSelection: true,
  useSpaces: false,
  useHardSpace: true,
  spacesCount: 4
};
var TabKeyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.addCommand({
      id: "obs-tab-tab-key",
      name: "(internal) tab key trigger",
      hotkeys: [
        {
          key: "Tab",
          modifiers: []
        }
      ],
      editorCallback: (editor) => {
        let cursorFrom = editor.getCursor("from");
        let cursorTo = editor.getCursor("to");
        let somethingSelected = cursorFrom.line != cursorTo.line || cursorFrom.ch != cursorTo.ch;
        if (somethingSelected && this.settings.indentsIfSelection) {
          editor.exec("indentMore");
        } else {
          let cursorFrom2 = editor.getCursor("from");
          let tabStr = this.settings.useSpaces ? (this.settings.useHardSpace ? "\xA0" : " ").repeat(this.settings.spacesCount) : "	";
          if (!somethingSelected) {
            if (/^((\t)*- )$|^((\t)*[0-9]+. )$/.test(editor.getLine(cursorFrom2.line))) {
              editor.exec("indentMore");
              return;
            }
          }
          editor.replaceSelection(tabStr);
          editor.setCursor({ line: cursorFrom2.line, ch: cursorFrom2.ch + tabStr.length });
        }
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Obsidian Tab Key Plugin" });
    containerEl.createEl("i", { text: "Restore tab key behaviour: tab key inserts a tab, the way it should be." });
    containerEl.createEl("br");
    new import_obsidian.Setting(containerEl).setName("Use spaces instead of tab").setDesc("false(default): Insert tab (\\t) when tab key is pressed. true: Insert spaces (\xA0\xA0\xA0\xA0) when tab key is pressed.").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSpaces).onChange(async (value) => {
      this.plugin.settings.useSpaces = value;
      this.display();
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.useSpaces) {
      new import_obsidian.Setting(containerEl).setName("Use hard spaces").setDesc(`If "Indent using tabs" is false, space will be used to indent. If "Use hard spaces" is off, a normal space character will be used. Notice that with Markdown, repeated normal spaces will be rendered as one. Turn this option on to use hard spaces (U+00A0), which will not be truncated after Markdown render. To indent stuff in the processed Markdown output, move your cursor to the begin and press tab (indenting won't insert hard spaces)`).addToggle((toggle) => toggle.setValue(this.plugin.settings.useHardSpace).onChange(async (value) => {
        this.plugin.settings.useHardSpace = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("Space count").setDesc("The number of spaces or hard spaces inserted when tab key is pressed. default: 4").addSlider((slider) => slider.setValue(this.plugin.settings.spacesCount).setLimits(2, 8, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.spacesCount = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("Indents when selection is not empty").setDesc("true(default): Select some text and press tab key will indent the selected lines. Same behaviour as most IDEs. \nfalse: Selection will be replaced with one tab").addToggle((toggle) => toggle.setValue(this.plugin.settings.indentsIfSelection).onChange(async (value) => {
      this.plugin.settings.indentsIfSelection = value;
      await this.plugin.saveSettings();
    }));
  }
};
